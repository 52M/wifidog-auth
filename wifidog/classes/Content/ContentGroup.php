<?php


/********************************************************************\
 * This program is free software; you can redistribute it and/or    *
 * modify it under the terms of the GNU General Public License as   *
 * published by the Free Software Foundation; either version 2 of   *
 * the License, or (at your option) any later version.              *
 *                                                                  *
 * This program is distributed in the hope that it will be useful,  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    *
 * GNU General Public License for more details.                     *
 *                                                                  *
 * You should have received a copy of the GNU General Public License*
 * along with this program; if not, contact:                        *
 *                                                                  *
 * Free Software Foundation           Voice:  +1-617-542-5942       *
 * 59 Temple Place - Suite 330        Fax:    +1-617-542-2652       *
 * Boston, MA  02111-1307,  USA       gnu@gnu.org                   *
 *                                                                  *
 \********************************************************************/
/**@file ContentGroup.php
 * @author Copyright (C) 2005 Benoit GrÃ©goire <bock@step.polymtl.ca>,
 * Technologies Coeus inc.
 */
require_once BASEPATH.'classes/Content.php';

/** A generic content group */
class ContentGroup extends Content
{
	/* Content selection modes */
	private $CONTENT_SELECTION_MODES = array ('RANDOM' => "Pick content elements randomly", 'RANDOM_NO_REPEAT' => "Pick content elements randomly, but do not display the same one twice", 'SEQUENTIAL' => "Pick content elements in sequential order, and then roll over", 'SEQUENTIAL_NO_REPEAT' => "Pick content elements in sequential order, and stop once they have all been shown", 'ALL_AT_ONCE' => "Display all content elements at once");

	protected $is_artistic_content;
	protected $is_locative_content;
	private $content_selection_mode;
	private $content_group_row;

	protected function __construct($content_id)
	{
		parent :: __construct($content_id);
		global $db;
		$content_id = $db->EscapeString($content_id);

		$sql = "SELECT * FROM content_group WHERE content_group_id='$content_id'";
		$db->ExecSqlUniqueRes($sql, $row, false);
		if ($row == null)
		{
			/*Since the parent Content exists, the necessary data in content_group had not yet been created */
			$sql = "INSERT INTO content_group (content_group_id) VALUES ('$content_id')";
			$db->ExecSqlUpdate($sql, false);
			$sql = "SELECT * FROM content_group WHERE content_group_id='$content_id'";
			$db->ExecSqlUniqueRes($sql, $row, false);
			if ($row == null)
			{
				throw new Exception(_("The content with the following id could not be found in the database: ").$content_id);
			}

		}
		$this->content_group_row = $row;
		$content_selection_mode = $this->getContentSelectionMode();
		if (empty ($content_selection_mode))
		{
			$this->setContentSelectionMode('RANDOM');
		}
	}

	/** Is the content group artistic in nature?
	 * @return true or false */
	public function isArtisticContent()
	{
		if ($this->content_group_row['is_artistic_content'] == 't')
		{
			$retval = true;
		}
		else
		{
			$retval = false;
		}
		return $retval;
	}

	/** Set if the content group is artistic in nature, 
	 * @param $is_artistic_content true or false*/
	public function setIsArtisticContent($is_artistic_content)
	{
		if ($is_artistic_content != $this->isArtisticContent()) /* Only update database if there is an actual change */
		{
			$is_artistic_content ? $is_artistic_content_sql = 'TRUE' : $is_artistic_content_sql = 'FALSE';

			global $db;
			$db->ExecSqlUpdate("UPDATE content_group SET is_artistic_content = $is_artistic_content_sql WHERE content_group_id = '$this->id'", false);
			$this->refresh();
		}

	}

	/** Does the content shown or generated by the content group directly related to where it is viewed from? 
	 * @return true or false */
	public function isLocativeContent()
	{
		if ($this->content_group_row['is_locative_content'] == 't')
		{
			$retval = true;
		}
		else
		{
			$retval = false;
		}
		return $retval;
	}

	/** Set if the content group is locative 
	 * @param $is_locative_content true or false
	 * */
	public function setIsLocativeContent($is_locative_content)
	{
		if ($is_locative_content != $this->isLocativeContent()) /* Only update database if there is an actual change */
		{
			$is_locative_content ? $is_locative_content_sql = 'TRUE' : $is_locative_content_sql = 'FALSE';

			global $db;
			$db->ExecSqlUpdate("UPDATE content_group SET is_locative_content = $is_locative_content_sql WHERE content_group_id = '$this->id'", false);
			$this->refresh();
		}

	}

	/** In what order is the content displayed to the user 
	* @return string, a key of CONTENT_SELECTION_MODES */
	public function getContentSelectionMode()
	{
		return $this->content_group_row['content_selection_mode'];
	}

	/** How is the content displayed to the user
	 * @param $content_selection_mode One of the CSM_* constants defined in the class
	 * @return true if successfull
	 * */
	protected function setContentSelectionMode($content_selection_mode, & $errormsg = null)
	{
		$retval = false;
		if (isset ($this->CONTENT_SELECTION_MODES[$content_selection_mode]) && $content_selection_mode != $this->getContentSelectionMode()) /* Only update database if the mode is valid and there is an actual change */
		{
			global $db;
			$content_selection_mode = $db->EscapeString($content_selection_mode);
			$db->ExecSqlUpdate("UPDATE content_group SET content_selection_mode = '$content_selection_mode' WHERE content_group_id = '$this->id'", false);
			$this->refresh();
			$retval = true;
		}
		elseif (!isset ($this->CONTENT_SELECTION_MODES[$content_selection_mode]))
		{
			$errormsg = _("Invalid content selection mode (must be part of CONTENT_SELECTION_MODES)");
			$retval = false;
		}
		else
		{
			/* Successfull, but nothing modified */
			$retval = true;
		}
		return $retval;
	}
	public function getAdminUI($subclass_admin_interface = null)
	{
		$html = '';
		$html .= "<div class='admin_class'>ContentGroup (".get_class($this)." instance)</div>\n";

		/* is_artistic_content */
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>Is artistic content?: </div>\n";
		$html .= "<div class='admin_section_data'>\n";
		$name = "content_group_".$this->id."_is_artistic_content";
		$this->isArtisticContent() ? $checked = 'CHECKED' : $checked = '';
		$html .= "<input type='checkbox' name='$name' $checked>\n";
		$html .= "</div>\n";
		$html .= "</div>\n";

		/* is_locative_content */
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>". ("Is locative content?").": </div>\n";
		$html .= "<div class='admin_section_data'>\n";
		$name = "content_group_".$this->id."_is_locative_content";
		$this->isLocativeContent() ? $checked = 'CHECKED' : $checked = '';
		$html .= "<input type='checkbox' name='$name' $checked>\n";
		$html .= "</div>\n";
		$html .= "</div>\n";

		/* content_selection_mode */
		global $AUTH_SOURCE_ARRAY;
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>"._("Content selection mode").": </div>\n";
		$html .= "<div class='admin_section_data'>\n";
		$name = "content_group_".$this->id."_content_selection_mode";

		$i = 0;
		foreach ($this->CONTENT_SELECTION_MODES as $select_mode_id => $select_mode_descr)
		{
			$tab[$i][0] = $select_mode_id;
			$tab[$i][1] = $select_mode_descr;
			$i ++;
		}
		$html .= FormSelectGenerator :: generateFromArray($tab, $this->getContentSelectionMode(), $name, null, false);
		$html .= "</div>\n";
		$html .= "</div>\n";

		/* content_group_element (table)*/
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>"._("Content group elements:")."</div>\n";

		$html .= "<ul class='admin_section_list'>\n";
		foreach ($this->getElements() as $element)
		{
			$html .= "<li class='admin_section_list_item'>\n";
			$html .= "<div class='admin_section_data'>\n";
			$html .= $element->getAdminUI();
			$html .= "</div'>\n";
			$html .= "<div class='admin_section_tools'>\n";
			$name = "content_group_".$this->id."_element_".$element->GetId()."_erase";
			$html .= "<input type='submit' name='$name' value='"._("Delete")."' onclick='submit();'>";
			$html .= "</div>\n";
			$html .= "</li>\n";
		}
		$html .= "<li class='admin_section_list_item'>\n";
		$html .= self :: getNewContentUI("content_group_{$this->id}_new_element");
		$html .= "</li>\n";
		$html .= "</ul>\n";
		$html .= "</div>\n";

		$html .= $subclass_admin_interface;
		return parent :: getAdminUI($html);
	}

	function processAdminUI()
	{
		parent :: processAdminUI();

		/* is_artistic_content */
		$name = "content_group_".$this->id."_is_artistic_content";
		!empty ($_REQUEST[$name]) ? $this->setIsArtisticContent(true) : $this->setIsArtisticContent(false);

		/* is_locative_content */
		$name = "content_group_".$this->id."_is_locative_content";
		!empty ($_REQUEST[$name]) ? $this->setIsLocativeContent(true) : $this->setIsLocativeContent(false);

		/* content_selection_mode */
		global $AUTH_SOURCE_ARRAY;

		$name = "content_group_".$this->id."_content_selection_mode";
		$content_selection_mode = FormSelectGenerator :: getResult($name, null);
		$this->setContentSelectionMode($content_selection_mode);

		/* content_group_element */
		foreach ($this->getElements() as $element)
		{
			$name = "content_group_".$this->id."_element_".$element->GetId()."_erase";
			if (!empty ($_REQUEST[$name]) && $_REQUEST[$name] == true)
			{
				$element->delete();
			}
			else
			{
				$element->processAdminUI();
			}
		}

		/* We explicitely call the ContentGroupElement version of processNewContentUI */
		$new_element = ContentGroupElement :: processNewContentUI("content_group_{$this->id}_new_element", $this);
	}

	/**Get the next element or elements to be displayed, depending on the display mode
	* @return an array of ContentGroupElement or an empty arrray */
	function getDisplayElements()
	{
		global $db;
		$retval = array ();
		$user = User :: getCurrentUser();
		if ($user)
		{
			$user_id = $user->getId();
		}
		else
		{
			$user_id = '';
		}
		$node = Node :: getCurrentNode();
		if ($node)
		{
			$node_id = $node->getId();
		}
		else
		{
			$node_id = '';
		}

		if ($this->getContentSelectionMode() == 'RANDOM')
		{
		}
		elseif ($this->getContentSelectionMode() == 'RANDOM_NO_REPEAT')
		{
			$sql = "SELECT content_group_element_id FROM content_group_element "."WHERE content_group_id='$this->id' "."AND content_group_element_id NOT IN (SELECT content_id FROM content_display_log WHERE user_id = '$user_id') "."ORDER BY display_order";
			$db->ExecSql($sql, $element_rows, false);
			if ($element_rows == null)
			{
				$element_rows = array ();
			}

			foreach ($element_rows as $element_row)
			{
				$retval[] = self :: getObject($element_row['content_group_element_id']);
			}
			foreach ($retval as $id => $content_group_element)
			{
				if ($content_group_element->isDisplayableAt(Node :: GetCurrentNode()) == false)
				{
					unset ($retval[$id]); /** Drop this content from consideration */
				}
			}
			shuffle($retval);
			if (!empty ($retval))
			{
				$retval = array ($retval[0]); //Pick one
			}

		}
		elseif ($this->getContentSelectionMode() == 'SEQUENTIAL')
		{
		}
		elseif ($this->getContentSelectionMode() == 'SEQUENTIAL_NO_REPEAT')
		{
		}
		elseif ($this->getContentSelectionMode() == 'ALL_AT_ONCE')
		{
			$sql = "SELECT content_group_element_id FROM content_group_element WHERE content_group_id='$this->id' ORDER BY display_order";

		}
		else
		{
			echo _("Unsupported selection mode: ").$this->getContentSelectionMode();
		}

		//echo count($retval).' returned <br>';
		return $retval;
	}

	/** Retreives the user interface of this object.  Anything that overrides this method should call the parent method with it's output at the END of processing.
	 * @param $subclass_admin_interface Html content of the interface element of a children
	 * @return The HTML fragment for this interface */
	public function getUserUI($subclass_user_interface = null)
	{
		$html = '';
		$html .= "<div class='user_ui_container'>\n";
		$html .= "<div class='user_ui_object_class'>ContentGroup (".get_class($this)." instance)</div>\n";

		$display_elements = $this->getDisplayElements();
		if (count($display_elements) > 0)
		{
			foreach ($display_elements as $display_element)
			{
				$html .= $display_element->getUserUI();
			}
		}
		else
		{
			$html .= '<p class="warningmsg">'._("Sorry, no elements available at this hotspot or all elements of the content group have already been shown")."</p>\n";
		}

		$html .= $subclass_user_interface;
		$html .= "</div>\n";

		return parent :: getUserUI($html);
	}
	/**Get all elements
	 * @return an array of ContentGroupElement or an empty arrray */
	function getElements()
	{
		global $db;
		$retval = array ();
		$sql = "SELECT content_group_element_id FROM content_group_element WHERE content_group_id='$this->id' ORDER BY display_order";
		$db->ExecSql($sql, $element_rows, false);
		if ($element_rows != null)
		{
			foreach ($element_rows as $element_row)
			{
				$retval[] = self :: getObject($element_row['content_group_element_id']);
			}
		}
		return $retval;
	}
	/** Delete this Content from the database 
	*/
	public function delete(& $errmsg)
	{
		if ($this->isPersistent() == false)
		{
			foreach ($this->getElements() as $element)
			{
				$element->delete($errmsg);
			}
		}
		return parent :: delete($errmsg);
	}

} // End class
?>