<?php


/********************************************************************\
 * This program is free software; you can redistribute it and/or    *
 * modify it under the terms of the GNU General Public License as   *
 * published by the Free Software Foundation; either version 2 of   *
 * the License, or (at your option) any later version.              *
 *                                                                  *
 * This program is distributed in the hope that it will be useful,  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    *
 * GNU General Public License for more details.                     *
 *                                                                  *
 * You should have received a copy of the GNU General Public License*
 * along with this program; if not, contact:                        *
 *                                                                  *
 * Free Software Foundation           Voice:  +1-617-542-5942       *
 * 59 Temple Place - Suite 330        Fax:    +1-617-542-2652       *
 * Boston, MA  02111-1307,  USA       gnu@gnu.org                   *
 *                                                                  *
 \********************************************************************/
/**@file ContentGroup.php
 * @author Copyright (C) 2005 Benoit GrÃ©goire <bock@step.polymtl.ca>,
 * Technologies Coeus inc.
 */
require_once BASEPATH.'classes/Content.php';

/** A generic content group */
class ContentGroup extends Content
{
	/* Content selection modes */
	const CSM_RANDOM = 'CSM_RANDOM'; /**< Pick a content elements randomly */
	const CSM_RANDOM_NO_REPEAT = 'CSM_RANDOM_NO_REPEAT'; /**< Pick a content elements randomly, but do not display the same one twice */
	const CSM_SEQUENTIAL = 'CSM_SEQUENTIAL'; /**< Pick the content elements in sequential order, and then roll over */
	const CSM_SEQUENTIAL_NO_REPEAT = 'CSM_SEQUENTIAL_NO_REPEAT'; /**< Pick the content elements in sequential order, and stop once they have all been shown */
	const CSM_ALL = 'CSM_ALL'; /**< Display all content elements at once */

	protected $is_artistic_content;
	protected $is_locative_content;
	private $content_selection_mode;
	private $content_group_row;

	protected function __construct($content_id)
	{
		parent :: __construct($content_id);
		global $db;
		$content_id = $db->EscapeString($content_id);

		$sql = "SELECT * FROM content_group WHERE content_group_id='$content_id'";
		$db->ExecSqlUniqueRes($sql, $row, false);
		if ($row == null)
		{
			/*Since the parent Content exists, the necessary data in content_group had not yet been created */
			$sql = "INSERT INTO content_group (content_group_id) VALUES ('$content_id')";
			$db->ExecSqlUpdate($sql, false);
			$sql = "SELECT * FROM content_group WHERE content_group_id='$content_id'";
			$db->ExecSqlUniqueRes($sql, $row, false);
			if ($row == null)
			{
				throw new Exception(_("The content with the following id could not be found in the database: ").$content_id);
			}

		}
		$this->content_group_row = $row;
	}

	/** Is the content group artistic in nature?
	 * @return true or false */
	public function isArtisticContent()
	{
		if($this->content_group_row['is_artistic_content']=='t')
		{
			$retval = true;
		}
		else
		{
			$retval=false;
		}
		return $retval;
	}
	
	/** Set if the content group is artistic in nature, 
	 * @param $is_artistic_content true or false*/
	public function setIsArtisticContent($is_artistic_content)
	{
		if($is_artistic_content!=$this->isArtisticContent())/* Only update database if there is an actual change */
		{
		$is_artistic_content?$is_artistic_content_sql='TRUE':$is_artistic_content_sql='FALSE';

		global $db;
		$db->ExecSqlUpdate("UPDATE content_group SET is_artistic_content = $is_artistic_content_sql WHERE content_group_id = '$this->id'", false);
		$this->refresh();
		}

	}
	

	/** Does the content shown or generated by the content group directly related to where it is viewed from? 
	 * @return true or false */
	public function isLocativeContent()
	{
		if($this->content_group_row['is_locative_content']=='t')
		{
			$retval = true;
		}
		else
		{
			$retval=false;
		}
		return $retval;
	}
	
	/** Set if the content group is locative 
	 * @param $is_locative_content true or false
	 * */
	public function setIsLocativeContent($is_locative_content)
	{
		if($is_locative_content!=$this->isLocativeContent())/* Only update database if there is an actual change */
		{
		$is_locative_content?$is_locative_content_sql='TRUE':$is_locative_content_sql='FALSE';

		global $db;
		$db->ExecSqlUpdate("UPDATE content_group SET is_locative_content = $is_locative_content_sql WHERE content_group_id = '$this->id'", false);
		$this->refresh();
		}

	}
	/** How is the content displayed to the user
	 * @param $content_selection_mode One of the CSM_* constants defined in the class
	 * @return true if successfull
	 * */
	protected function setContentSelectionMode($content_selection_mode)
	{
		$this-> $content_selection_mode = $content_selection_mode;
		return true;
	}
	public function getAdminUI($subclass_admin_interface = null)
	{
		$html = '';
		$html .= "<div class='admin_class'>ContentGroup (".get_class($this)." instance)</div>\n";

		/* is_artistic_content */
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>Is artistic content?: </div>\n";		
						$html .= "<div class='admin_section_data'>\n";		
		$name = "content_group_".$this->id."_is_artistic_content";
		$this->isArtisticContent()?$checked='CHECKED':$checked='';
		$html .= "<input type='checkbox' name='$name' $checked>\n";
		$html .= "</div>\n";
		$html .= "</div>\n";
		
		/* is_locative_content */
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<div class='admin_section_title'>Is locative content?: </div>\n";		
						$html .= "<div class='admin_section_data'>\n";		
		$name = "content_group_".$this->id."_is_locative_content";
		$this->isLocativeContent()?$checked='CHECKED':$checked='';
		$html .= "<input type='checkbox' name='$name' $checked>\n";
		$html .= "</div>\n";
		$html .= "</div>\n";

		/* content_group_element (table)*/
		$html .= "<div class='admin_section_container'>\n";
		$html .= "<span class='admin_section_title'>"._("Content group elements:")."</span>\n";

		$html .= "<ul class='admin_section_list'>\n";
			foreach ($this->getElements() as $element)
			{
				$html .= "<li class='admin_section_list_item'>\n";
				$html .= "<div class='admin_section_data'>\n";
				$html .= $element->getAdminUI();
								$html .= "</div'>\n";
				$html .= "<div class='admin_section_tools'>\n";
				$name = "content_group_".$this->id."_element_".$element->GetId()."_erase";
				$html .= "<input type='submit' name='$name' value='"._("Delete")."' onclick='submit();'>";
				$html .= "</div>\n";
				$html .= "</li>\n";
			}
						$html .= "<li class='admin_section_list_item'>\n";
						$html .= self :: getNewContentInterface("content_group_{$this->id}_new_element");
										$html .= "</li>\n";
		$html .= "</ul>\n";
		$html .= "</div>\n";

		$html .= $subclass_admin_interface;
		return parent :: getAdminUI($html);
	}

	function processAdminUI()
	{
		parent :: processAdminUI();
		
		/* is_artistic_content */
		$name = "content_group_".$this->id."_is_artistic_content";
		!empty($_REQUEST[$name])?$this->setIsArtisticContent(true):$this->setIsArtisticContent(false);

		/* is_locative_content */
		$name = "content_group_".$this->id."_is_locative_content";
		!empty($_REQUEST[$name])?$this->setIsLocativeContent(true):$this->setIsLocativeContent(false);



		/* content_group_element */
			foreach ($this->getElements() as $element)
			{
				$name = "content_group_".$this->id."_element_".$element->GetId()."_erase";
				if (!empty ($_REQUEST[$name]) && $_REQUEST[$name] == true)
				{
					$element->delete();
				}
				else
				{
					$element->processAdminUI();
				}
			}

/* We explicitely call the ContentGroupElement version of processNewContentInterface */
		$new_element = ContentGroupElement :: processNewContentInterface("content_group_{$this->id}_new_element", $this);
	}
	/**Get all elements
	 * @return an array of ContentGroupElement or an empty arrray */
	function getElements()
	{
		global $db;
		$retval = array();
		$sql = "SELECT content_group_element_id FROM content_group_element WHERE content_group_id='$this->id' ORDER BY display_order";
		$db->ExecSql($sql, $element_rows, false);
		if ($element_rows != null)
		{
			foreach ($element_rows as $element_row)
			{
				$retval[] = self :: getContent($element_row['content_group_element_id']);
			}
		}
		return $retval;
}
	/** Delete this Content from the database 
 */
		public function delete()
	{	
				if($this->isPersistent()==false)
		{
			foreach ($this->getElements() as $element)
			{
					$element->delete();
			}
		}
		parent::delete();
	}

} // End class
?>