# $Header$
2004-08-11 Benoit Grégoire  <bock@step.polymtl.ca>
	* wifidog/config.php: Add USER_MANAGEMENT_PAGE
	* wifidog/include/user_management_menu.php:  Code meant to deal with non-standard ports broke the menu.  Hopefully fixed.
	* Add alex's mising changelog entry...
	
2004-08-11 alexcv
	* wifidog/ping/index.php: will now reply if the wifidog auth server is up. to be used by wifidog to do heartbeats.

2004-08-07 Benoit Grégoire  <bock@step.polymtl.ca>
	* Add code to import a NoCat user database (passwd).  The username will be generated from the first part of the email if the name was en email.
	* Change password hashing algorithm to make it compatible with NoCat (For the curious among you, the hashing algorithm is now:  take the md5 digest in binary format of the password, and base64 encode it.
	* Table schema changed to accomodate newhash length (users.pass is now varchar(32))
	* The user is now allowed to login with either his username or his email.
	
2004-08-03 Benoit Grégoire  <bock@step.polymtl.ca>
	* Make gettext support optionnal, and define GETTEXT_AVAILABLE, will be set to true if gettext is available.  If false, blank _() and gettext() functions will be defined so the system still works.

2004-08-03 Benoit Grégoire  <bock@step.polymtl.ca>
	* Fix BASE_URL_PATH to properly detect non-standard server ports (hopefully).

2004-08-02 Benoit Grégoire  <bock@step.polymtl.ca>
	* wifidog-auth lives! New since the dark ages
	* Demo page to allow people to hack more easely on it
	* Support for multiple nodes.  TODO:  Merge with the database project.
	* Very cool local content architecture.  Every hotspot can have a folder in the local_content directory.  This folder can be filed by a single logo, leaving all the rest to the default content, or be completely custom (stylesheet, login page, portal page, header, etc.)
	* Everything in local content is templated with smarty, no problem with web designer wrecking havoc on the auth server.  You can edit everything in local_content/default even if you only speak html.
	* No need to set any path in the web server config files (that one was a bitch to implement)
	* RSS feed support (optionnal, with magpierss), one feed per node (url stored in the database, works great, but no gui to edit it yet) and one network-wide RSS feed.
	* All path are editable from the config file
	* "Productize" the thing, so it make sense for other groups to install it (the network name, url, default RSS, and such are set from the config file.
	* Put most strings in gettext calls for easy future translation.
	* User can request that the server send the validation email again
	* User can change password
	* User who forgot his username can have it mailed to him.
	* User who lost his password can ask the system to generate a new one and mail it to him.
	* Email is now a separate field to preserve user privacy.
	* Enforces (politely) that there are no duplicate emails in the database
	* Database abstraction layer with very nice debugging features (just append true at the end of the call, and you'll see the query, the results, the query plan and number of affected rows.  Also allow future upgrade to postgres.
	* Lots of other things I forgot.
	
